#:import math math


<Slider>:
    canvas:
        Clear
        Color:
            rgb: 1, 1, 1
        BorderImage:
            border: (0, 18, 0, 18) if self.orientation == 'horizontal' else (18, 0, 18, 0)
            pos: (self.x + self.padding, self.center_y - sp(18)) if self.orientation == 'horizontal' else (self.center_x - 18, self.y + self.padding)
            size: (self.width - self.padding * 2, sp(36)) if self.orientation == 'horizontal' else (sp(36), self.height - self.padding * 2)
            source: 'data/slider_bg.png'
        Rectangle:
            pos: (self.value_pos[0] - sp(16), self.center_y - sp(14)) if self.orientation == 'horizontal' else (self.center_x - (16), self.value_pos[1] - sp(16))
            size: (sp(32), sp(32))
            source: 'data/slider_handle.png'

<MainScreen>:
    name: 'main'
    grid: grid
    ScrollView:
        size_hint: 1, 1
        StackLayout:
            id: grid

            padding: '32sp'
            spacing: '16sp'
            size_hint_y: None
            height: self.minimum_height


<CategoryScreen>:
    name: 'category'
    grid: grid
    ScrollView:
        size_hint: 1, 1
        StackLayout:
            id: grid
            padding: '32sp'
            spacing: '24sp'
            size_hint_y: None
            height: self.minimum_height


<SpeedButton>:
    background_normal: 'data/button_normal.png'
    background_down: 'data/button_down.png'


<ExperimentScreen>:
    container: container
    play_button: play_button
    controls: controls
    tabs_area: tabs_area
    BoxLayout:
        orientation: 'vertical'

        BoxLayout:
            orientation: 'horizontal'

            RelativeLayout:
                size_hint: 1, 1

                id: container

            Widget:
                id: tabs_area
                size_hint: None, 1
                width: sp(312)*root.tabs_pos
        Widget:
            size_hint: 1, None
            height: sp(64+16)*root.timeline_pos

    TabbedPanel:
        size_hint: None, None
        width: sp(312)
        background_color: 1,1,1,0
        tab_height: '50sp'
        height: root.tabs_area.height
        pos: root.tabs_area.pos[0], root.tabs_area.pos[1]
        do_default_tab: False
        TabbedPanelItem:
            text: 'Info'
            background_normal: 'data/tab_bg.png'
            background_down: 'data/tab_bg_down.png'
            StackLayout:
                padding: '12sp'
                RstDocument:
                    document_root: root.experiment_path
                    text: root.description_rst

        TabbedPanelItem:
            text: 'Controls'
            background_color: 1,1,1,1
            background_normal: 'data/tab_bg.png'
            background_down: 'data/tab_bg_down.png'
            border: 14,14,14,14
           # ScrollView:
            GridLayout:
                size_hint: 1.0, None
                height: self.minimum_height
                cols: 1
                id: controls
                spacing: '12sp'
                padding: '12sp'

    BoxLayout:
        size_hint: 1, None
        padding:'8sp'
        pos: 0, sp(-64-16)*(1.0-root.timeline_pos)
        height: sp(64+16)
        spacing:8
        orientation: 'horizontal'

        ToggleButton:
            id: play_button
            size_hint: None, None
            size: '64sp', '64sp'
            border: 3,3,3,3
            background_down: 'data/play_down.png'
            background_normal: 'data/play_normal.png'
            text: ''
            on_state: root.toggle_time(self.state)
        Button:
            size_hint: None, 1
            size: '64sp', '64sp'
            border: 3,3,3,3
            background_down: 'data/reset.png'
            background_normal: 'data/reset.png'
            text: ''
            on_state: root.reset()

        Spinner:
            size_hint: None, 1.0
            size: '64sp', '64sp'
            text: '1x'
            disabled: False if root.experiment is not None and root.experiment.can_change_speed == True else True
            opacity: 0.2 if self.disabled else 1.0
            border: 22, 22, 22, 22
            background_down: 'data/spinner_down.png'
            background_normal: 'data/spinner_normal.png'
            background_disabled_normal: 'data/spinner_normal.png'
            background_disabled_normal: 'data/spinner_normal.png'
            values: '1x', '2x', '5x'
            option_cls: 'SpeedButton'
            on_text: root.change_speed(self.text)

        Label:
            size_hint: None, 1
            size: '64sp', '64sp'
            font_size: '16sp'
            text: "{:.2f} s".format(root.time)
            text_size: self.size
            halign: 'center'
            valign: 'middle'

<MainLayout>:
    tabs_button: tabs_button
    timeline_button: timeline_button
    orientation: 'vertical'
    screen_manager: screen_manager
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            source: 'data/bg.jpg'
            size:root.size
            pos:root.pos
    BoxLayout:
        orientation: 'horizontal'
        size_hint: 1.0, None
        height: '64sp'

        BoxLayout:
            orientation: 'vertical'
            padding: '8sp'

            Label:
                text: root.screen_manager.current_screen.title if root.screen_manager.current_screen else 'Kivy physics sandbox'
                font_size: '20sp'
                bold: True
                halign: 'left'
                text_size: self.size
            Label:
                text: root.screen_manager.current_screen.description if root.screen_manager.current_screen else 'Select category'
                halign: 'left'
                text_size: self.size

        StackLayout:
            orientation: 'rl-tb'
            spacing: '8sp'
            padding: '8sp'
            Button:
                text: ''
                border: 3,3,3,3
                background_down: 'data/home.png'
                background_normal: self.background_down
                size_hint: None, None
                size: sp(64-16), sp(64-16)
                on_press: root.go_main()
            ToggleButton:
                id: timeline_button
                text: ''
                border: 3,3,3,3
                background_down: 'data/timeline_down.png'
                background_normal: 'data/timeline_normal.png'
                background_disabled_normal: 'data/timeline_disabled.png'
                background_disabled_down: 'data/timeline_disabled.png'
                disabled: root.screen_manager.current is not 'experiment'
                size_hint: None, None
                size: sp(64-16), sp(64-16)
                on_press: root.toggle_timeline()

            ToggleButton:
                id: tabs_button
                text: ''
                border: 3,3,3,3
                background_down: 'data/tabs_down.png'
                background_normal: 'data/tabs_normal.png'
                background_disabled_normal: 'data/tabs_disabled.png'
                background_disabled_down: 'data/tabs_disabled.png'
                size_hint: None, None
                disabled: root.screen_manager.current is not 'experiment'
                size: sp(64-16), sp(64-16)
                on_press: root.toggle_tabs()

    ScreenManager:
        id: screen_manager


<CatalogItem>:
    size_hint: None, None
    height: '168sp'
    width: '300sp'

    canvas:
        StencilPush
        Rectangle:
            pos: root.pos
            size: root.size

        StencilUse

        Color:
            rgba: 1,1,1,1
        Rectangle:
            texture: root.icon_texture if root.icon_texture else None
            pos: root.pos[0], root.pos[1]
            size: root.size[0], root.size[0]*root.icon_texture.height/float(root.icon_texture.width) if root.icon_texture else root.size[1]

        StencilUnUse
        Rectangle:
            pos: root.pos
            size: root.size

        StencilPop

        Color:
            rgba: 0, 0, 0, 0.5
        BorderImage:
            source: 'data/shadow.png'
            border: 16, 16, 16, 16
            pos: root.pos[0]-16, root.pos[1]-16
            size: root.size[0]+32, root.size[1]+32


        Color:
            rgba: 0, 0, 0, 0.7 if root.state == 'normal' else 0.2
        Rectangle:
            pos: root.pos
            size: root.size[0], root.text_height

    Label:
        text: root.title
        font_size: '16sp'
        bold: True
        pos: root.pos[0]+root.text_padding, root.pos[1]+root.text_padding
        size: root.size[0]-2*root.text_padding, root.text_height-root.text_padding
        text_size: self.size


<ExperimentWindow>:
    size_hint: 1, 1


<LineWidget>:
    canvas:
        Color:
            rgba: self.color
        Line:
            points: self.start_x, self.start_y, self.end_x, self.end_y
            width: self.width


<PhysicsObject>:
    canvas:
        PushMatrix
        Color:
            rgba: 1, 1, 1, 0.6 if self.show_trajectory else 0.0
        Line:
            points: [self.x, self.y] + [x for t in self._trajectory for x in t]
            width: 2
        Translate:
            xy: self.pos
        Rotate:
            angle: -self.angle
            axis: 0, 0, 1
        Color:
            rgba: self.color
        Rectangle:
            size: self.size[0]*self.scale, self.size[1]*self.scale
            pos: -self.width/2.0*self.scale, -self.height/2.0*self.scale
            source: self.source
        PopMatrix


<TexturedWidget>:
    canvas:
        Color:
            rgba: self.color
        Rectangle:
            pos: self.pos
            size: self.size
            texture: self.texture if self.texture else None
            tex_coords: self.offset_x, self.offset_y, self.offset_x + self.w, self.offset_y, self.offset_x + self.w, self.offset_y + self.h, self.offset_x, self.offset_y + self.h



<VectorWidget>:
    opacity: 1.0 if math.fabs(self.length)>0.01 else 0.01
    canvas:
        PushMatrix
        Translate:
            xy: self.pos[0], self.pos[1]
        Rotate:
            angle: -self.angle
            axis: 0, 0, 1
        Color:
            rgba: self.color
        Line:
            points: 0, 0, 0, self.length * self._scale, -self.arrow_size, self.length * self._scale - self.arrow_size * math.copysign(1, self.length), self.arrow_size, self.length * self._scale - self.arrow_size * math.copysign(1, self.length), 0, self.length * self._scale, 0, 0
            width: 1.5
        Translate:
            xy: 0, self.length*self._scale/2.0
        Rotate:
            angle: self.angle
            axis: 0,0,1
        Color:
            rgba: 0,0,0,0.6
        Rectangle:
            pos: -5, -5
            size: root.label.size
        Color:
            rgba: 1,1,1,1
        Rectangle:
            pos: -5, -5
            texture: root.label.texture if root.label else None
            size: root.label.size
        PopMatrix


<BaseControl>:
    canvas:
        Color:
            rgba: 0,0,0,0.2
        Rectangle:
            pos: root.pos
            size: root.size[0], root.size[1]+sp(10)


<CheckControl>:
    size_hint: 1.0, None
    height: '60sp'
    checkbox: checkbox

    BoxLayout:
        pos:root.pos
        size:root.size
        orientation: 'horizontal'
        padding:'8sp'
        BoxLayout:
            size_hint: 1.0, 1.0
            orientation: 'vertical'
            spacing:0
            padding:0
            Label:
                size_hint: 1.0, 0.4
                text: root.label
                font_size: '16sp'
                text_size: self.size
                valign: 'middle'
                padding: '-8sp','-2sp'
            Label:
                text: root.description
                size_hint: 1.0, 0.6
                font_size: '12sp'
                text_size: self.size
                valign: 'middle'
                padding: '-8sp', 0
        CheckBox:
            id: checkbox
            size_hint: None, 1.0
            width: self.height

            on_active: root.update_value()


<ChoiceControl>:
    size_hint: 1.0, None
    height: '50sp'
    spinner: spinner

    BoxLayout:
        pos:root.pos
        size:root.size
        orientation: 'horizontal'
        spacing:0
        padding:0
        BoxLayout:
            size_hint: 1.0, 1.0
            orientation: 'vertical'
            spacing:0
            padding:0
            Label:
                size_hint: 1.0, 0.4
                text: root.label
                font_size: '16sp'
                text_size: self.size
                valign: 'middle'
                padding: '-8sp','-2sp'
            Label:
                text: root.description
                size_hint: 1.0, 0.6
                font_size: '12sp'
                text_size: self.size
                valign: 'middle'
                padding: '-8sp', 0
        Spinner:
            id: spinner
            size_hint: None, 0.8
            width: '100sp'
            font_size: '18sp'
            values: root.choices
            text: root.value
            on_text: root.update_value()


<SliderControl>:
    slider: slider
    size_hint: 1.0, None
    height: '80sp'

    BoxLayout:
        orientation: 'vertical'
        pos:root.pos
        size:root.size
        padding:'8sp'
        BoxLayout:
            size_hint: 1.0, None
            height: '55sp'
            orientation: 'horizontal'
            spacing:0
            padding:0
            BoxLayout:
                size_hint: 1.0, 1.0
                orientation: 'vertical'
                spacing:0
                padding:0
                Label:
                    size_hint: 1.0, 0.4
                    text: root.label
                    font_size: '16sp'
                    text_size: self.size
                    valign: 'bottom'
                    padding: '-8sp','-2sp'
                Label:
                    text: root.description
                    size_hint: 1.0, 0.6
                    font_size: '12sp'
                    text_size: self.size
                    valign: 'middle'
                    padding: '-8sp', 0
            Label:
                size_hint: None, 0.8
                width: '100sp'
                font_name: 'data/DejaVuSansCondensed.ttf'
                valign: 'top'
                font_size: '16sp'
                text:  root.format.format(root.value)+root.dim
        Slider:
            id: slider
            size_hint: 1.0, None
            height: '20sp'
            padding:'20sp'
            on_value: root.update_value()